{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { Component } from \"react\";\nimport Layout from \"../../components/Layout\";\nimport Campaign from \"../../ethereum/campaign\";\nimport { Card } from \"semantic-ui-react\";\nimport web3 from \"../../ethereum/web3\";\n\nclass CampaignShow extends Component {\n  static async getInitialProps(props) {\n    const campaign = Campaign(props.query.address);\n    const summary = await campaign.methods.getSummary().call();\n    return {\n      minimumContribution: summary[0],\n      balance: summary[1],\n      requestsCount: summary[2],\n      approversCount: summary[3],\n      manager: summary[4]\n    };\n  }\n\n  renderCards() {\n    const {\n      balance,\n      manager,\n      minimumContribution,\n      requestsCount,\n      approversCount\n    } = this.props;\n    const items = [{\n      header: manager,\n      meta: \"Address of Manager\",\n      description: \"The manager created this campaign and create requests to withdraw money\",\n      style: {\n        overflowWrap: \"break-word\"\n      }\n    }, {\n      header: minimumContribution,\n      meta: \"Minimum Contribution (wei)\",\n      description: \"You must contribute at least this much wei to become an approver\"\n    }, {\n      header: requestsCount,\n      meta: \"Number of Requests\",\n      description: \"A request tries to withdraw money from the contract. Requests must be approved by approvers.\"\n    }, {\n      header: approversCount,\n      meta: \"Number of Approvers\",\n      description: \"Number of people who have already donated to this campaign\"\n    }, {\n      header: web3.utils.fromWei(balance, \"ether\"),\n      meta: \"Campaign Balance (ether)\",\n      description: \"The balance is how much money this campaign has left to spend\"\n    }];\n    return __jsx(Card.Group, {\n      items: items\n    });\n  }\n\n  render() {\n    return __jsx(Layout, null, this.renderCards());\n  }\n\n}\n\nexport default CampaignShow;","map":{"version":3,"sources":["/home/rlima/Other Projects/Blockchain-Course/kickstart/pages/campaigns/show.js"],"names":["React","Component","Layout","Campaign","Card","web3","CampaignShow","getInitialProps","props","campaign","query","address","summary","methods","getSummary","call","minimumContribution","balance","requestsCount","approversCount","manager","renderCards","items","header","meta","description","style","overflowWrap","utils","fromWei","render"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,MAAP,MAAmB,yBAAnB;AACA,OAAOC,QAAP,MAAqB,yBAArB;AACA,SAASC,IAAT,QAAqB,mBAArB;AACA,OAAOC,IAAP,MAAiB,qBAAjB;;AAEA,MAAMC,YAAN,SAA2BL,SAA3B,CAAqC;AACnC,eAAaM,eAAb,CAA6BC,KAA7B,EAAoC;AAClC,UAAMC,QAAQ,GAAGN,QAAQ,CAACK,KAAK,CAACE,KAAN,CAAYC,OAAb,CAAzB;AAEA,UAAMC,OAAO,GAAG,MAAMH,QAAQ,CAACI,OAAT,CAAiBC,UAAjB,GAA8BC,IAA9B,EAAtB;AAEA,WAAO;AACLC,MAAAA,mBAAmB,EAAEJ,OAAO,CAAC,CAAD,CADvB;AAELK,MAAAA,OAAO,EAAEL,OAAO,CAAC,CAAD,CAFX;AAGLM,MAAAA,aAAa,EAAEN,OAAO,CAAC,CAAD,CAHjB;AAILO,MAAAA,cAAc,EAAEP,OAAO,CAAC,CAAD,CAJlB;AAKLQ,MAAAA,OAAO,EAAER,OAAO,CAAC,CAAD;AALX,KAAP;AAOD;;AAEDS,EAAAA,WAAW,GAAG;AACZ,UAAM;AACJJ,MAAAA,OADI;AAEJG,MAAAA,OAFI;AAGJJ,MAAAA,mBAHI;AAIJE,MAAAA,aAJI;AAKJC,MAAAA;AALI,QAMF,KAAKX,KANT;AAQA,UAAMc,KAAK,GAAG,CACZ;AACEC,MAAAA,MAAM,EAAEH,OADV;AAEEI,MAAAA,IAAI,EAAE,oBAFR;AAGEC,MAAAA,WAAW,EACT,yEAJJ;AAKEC,MAAAA,KAAK,EAAE;AAAEC,QAAAA,YAAY,EAAE;AAAhB;AALT,KADY,EAQZ;AACEJ,MAAAA,MAAM,EAAEP,mBADV;AAEEQ,MAAAA,IAAI,EAAE,4BAFR;AAGEC,MAAAA,WAAW,EACT;AAJJ,KARY,EAcZ;AACEF,MAAAA,MAAM,EAAEL,aADV;AAEEM,MAAAA,IAAI,EAAE,oBAFR;AAGEC,MAAAA,WAAW,EACT;AAJJ,KAdY,EAoBZ;AACEF,MAAAA,MAAM,EAAEJ,cADV;AAEEK,MAAAA,IAAI,EAAE,qBAFR;AAGEC,MAAAA,WAAW,EACT;AAJJ,KApBY,EA0BZ;AACEF,MAAAA,MAAM,EAAElB,IAAI,CAACuB,KAAL,CAAWC,OAAX,CAAmBZ,OAAnB,EAA4B,OAA5B,CADV;AAEEO,MAAAA,IAAI,EAAE,0BAFR;AAGEC,MAAAA,WAAW,EACT;AAJJ,KA1BY,CAAd;AAkCA,WAAO,MAAC,IAAD,CAAM,KAAN;AAAY,MAAA,KAAK,EAAEH;AAAnB,MAAP;AACD;;AAEDQ,EAAAA,MAAM,GAAG;AACP,WAAO,MAAC,MAAD,QAAS,KAAKT,WAAL,EAAT,CAAP;AACD;;AA/DkC;;AAkErC,eAAef,YAAf","sourcesContent":["import React, { Component } from \"react\";\nimport Layout from \"../../components/Layout\";\nimport Campaign from \"../../ethereum/campaign\";\nimport { Card } from \"semantic-ui-react\";\nimport web3 from \"../../ethereum/web3\";\n\nclass CampaignShow extends Component {\n  static async getInitialProps(props) {\n    const campaign = Campaign(props.query.address);\n\n    const summary = await campaign.methods.getSummary().call();\n\n    return {\n      minimumContribution: summary[0],\n      balance: summary[1],\n      requestsCount: summary[2],\n      approversCount: summary[3],\n      manager: summary[4],\n    };\n  }\n\n  renderCards() {\n    const {\n      balance,\n      manager,\n      minimumContribution,\n      requestsCount,\n      approversCount,\n    } = this.props;\n\n    const items = [\n      {\n        header: manager,\n        meta: \"Address of Manager\",\n        description:\n          \"The manager created this campaign and create requests to withdraw money\",\n        style: { overflowWrap: \"break-word\" },\n      },\n      {\n        header: minimumContribution,\n        meta: \"Minimum Contribution (wei)\",\n        description:\n          \"You must contribute at least this much wei to become an approver\",\n      },\n      {\n        header: requestsCount,\n        meta: \"Number of Requests\",\n        description:\n          \"A request tries to withdraw money from the contract. Requests must be approved by approvers.\",\n      },\n      {\n        header: approversCount,\n        meta: \"Number of Approvers\",\n        description:\n          \"Number of people who have already donated to this campaign\",\n      },\n      {\n        header: web3.utils.fromWei(balance, \"ether\"),\n        meta: \"Campaign Balance (ether)\",\n        description:\n          \"The balance is how much money this campaign has left to spend\",\n      },\n    ];\n\n    return <Card.Group items={items} />;\n  }\n\n  render() {\n    return <Layout>{this.renderCards()}</Layout>;\n  }\n}\n\nexport default CampaignShow;\n"]},"metadata":{},"sourceType":"module"}